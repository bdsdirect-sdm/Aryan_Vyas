export const updateprofile = async (req: any, res: any) => {
    try {
        const { uuid } = req.user;
        const { firstname, lastname, phone, email } = req.body;

        const user = await User.findOne({ where: { uuid: uuid } });
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        user.firstname = firstname || user.firstname;
        user.lastname = lastname || user.lastname;
        user.phone = phone || user.phone;
        user.email = email || user.email;

        await user.save();

        return res.status(200).json({ message: "Profile updated successfully" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Error updating profile" });
    }
};
//////////////////////
router.post('/update-profile', userAuthMiddleware, updateprofile);
///////
VITE_UPDATE_PROFILE = update-profile
/////////////////////////////////
    UPDATE_USER: import.meta.env.VITE_UPDATE_PROFILE
//////////////////////
import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { Modal } from 'react-bootstrap';
import api from '../api/axiosInstance'; // Import your axios instance
import './Profile.css'; // Assuming you have some basic styles

// Helper function to fetch user data
const getUser = async (token: string) => {
  try {
    const response = await api.get('/user', {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (err: any) {
    toast.error("Failed to fetch user data");
    throw new Error(err?.message || "User data fetch failed");
  }
};

// Helper function to update user data
const updateUser = async (token: string, updatedUser: { firstname: string, lastname: string, phone: string, email: string }) => {
  try {
    const response = await api.post('/update-profile', updatedUser, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  } catch (err: any) {
    toast.error("Failed to update user data");
    throw new Error(err?.message || "User update failed");
  }
};

const Profile: React.FC = () => {
  const token = localStorage.getItem('token'); // Assuming token is stored in localStorage
  const [user, setUser] = useState<any>(null); // Initial user data state
  const [isEditing, setIsEditing] = useState(false);
  const [firstname, setFirstname] = useState('');
  const [lastname, setLastname] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [showModal, setShowModal] = useState(false);

  // Fetch user data on component mount
  useEffect(() => {
    if (token) {
      getUser(token)
        .then((data) => {
          setUser(data.user);
          setFirstname(data.user.firstname);
          setLastname(data.user.lastname);
          setPhone(data.user.phone);
          setEmail(data.user.email);
        })
        .catch((err) => {
          console.error("Error fetching user data:", err);
        });
    }
  }, [token]);

  // Save updated user data
  const handleSaveChanges = () => {
    if (firstname && lastname && phone && email) {
      const updatedUser = { firstname, lastname, phone, email };
      updateUser(token!, updatedUser)
        .then((response) => {
          toast.success("Profile updated successfully");
          setIsEditing(false);
          // Update the user state with the new data
          setUser((prevUser: any) => ({
            ...prevUser,
            firstname: updatedUser.firstname,
            lastname: updatedUser.lastname,
            phone: updatedUser.phone,
            email: updatedUser.email,
          }));
        })
        .catch((err) => {
          toast.error(`Error updating profile: ${err.message}`);
        });
    } else {
      toast.error("Please fill all fields");
    }
  };

  const handleOpenModal = () => setShowModal(true);
  const handleCloseModal = () => setShowModal(false);

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div className="profile-container">
      <h2>Profile</h2>

      <div className="profile-header">
        <img
          src={user.profileImage || 'https://via.placeholder.com/150'}
          alt="Profile"
          className="profile-image"
        />
        <div>
          <h3>{user.firstname} {user.lastname}</h3>
          <button onClick={() => setIsEditing(true)}>Edit Profile</button>
        </div>
      </div>

      <div className="profile-info">
        <div>
          <strong>Name:</strong>
          {isEditing ? (
            <div>
              <input
                type="text"
                value={firstname}
                onChange={(e) => setFirstname(e.target.value)}
                placeholder="First Name"
              />
              <input
                type="text"
                value={lastname}
                onChange={(e) => setLastname(e.target.value)}
                placeholder="Last Name"
              />
            </div>
          ) : (
            `${user.firstname} ${user.lastname}`
          )}
        </div>

        <div>
          <strong>Phone:</strong>
          {isEditing ? (
            <input
              type="text"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              placeholder="Phone Number"
            />
          ) : (
            user.phone
          )}
        </div>

        <div>
          <strong>Email:</strong>
          {isEditing ? (
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
            />
          ) : (
            user.email
          )}
        </div>
      </div>

      {isEditing && (
        <div>
          <button onClick={handleSaveChanges}>Save Changes</button>
          <button onClick={() => setIsEditing(false)}>Cancel</button>
        </div>
      )}

      <button onClick={handleOpenModal}>Add Address</button>

      <Modal show={showModal} onHide={handleCloseModal} centered>
        <Modal.Header closeButton>
          <Modal.Title>Add New Address</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {/* You can add your AddAddress component here */}
          <p>Add your address here...</p>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default Profile;
////////////////////
.profile-container {
    margin-left: 250px;
    padding: 20px;
    background-color: #f8f9fa;
    height: calc(100vh - 60px);
    overflow-y: auto;
}

.profile-title {
    text-align: center;
    font-size: 2rem;
    color: #333;
    margin-bottom: 20px;
}

.profile-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
}

.profile-image-container {
    position: relative;
}

.profile-image {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #ddd;
}

.file-input {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0;
    cursor: pointer;
}

button {
    padding: 10px 20px;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

h3 {
    margin-top: 10px;
    font-size: 1.5rem;
    color: #333;
}

.profile-info {
    margin-bottom: 20px;
}

.info-item {
    font-size: 1.1rem;
    margin: 5px 0;
}

strong {
    color: #555;
}

.profile-info .info-item p {
    margin: 5px 0;
}

.address-list {
    margin-top: 30px;
}

.address-item {
    margin-bottom: 20px;
}

.address-item div {
    font-size: 1rem;
    color: #555;
}

h4 {
    font-size: 1.25rem;
    color: #333;
}

.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal h2 {
    font-size: 1.5rem;
    margin-bottom: 20px;
}

.modal button {
    background-color: #ff4747;
    border-radius: 4px;
    margin-top: 10px;
}

.modal button:hover {
    background-color: #cc3f3f;
}

form {
    display: flex;
    flex-direction: column;
}

form label {
    font-weight: bold;
    margin-top: 10px;
}

form input {
    padding: 8px;
    margin-top: 5px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

form input:focus {
    outline: none;
    border-color: #007bff;
}

form button {
    margin-top: 20px;
    padding: 10px;
    background-color: #28a745;
    border: none;
    color: white;
    border-radius: 4px;
}

form button:hover {
    background-color: #218838;
}
