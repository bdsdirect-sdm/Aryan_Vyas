import React, { useEffect, useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import api from '../api/axiosInstance';
import { jwtDecode } from 'jwt-decode';
import { Local } from '../environment/env';
import { io, Socket } from 'socket.io-client'; // Import socket.io

// Create socket instance here
let socket: Socket;

const fetchChatRooms = async (token: string) => {
    const response = await api.get(`${Local.BASE_URL}chat/chatRooms`, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    return response.data;
};

const fetchChatMessages = async (chatRoomId: string, token: string) => {
    try {
        const response = await api.get(`${Local.BASE_URL}chat/chatMessages/${chatRoomId}`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        return response.data;
    } catch (err) {
        console.error(err);
        throw err;
    }
};

const sendChatMessage = async (messageData: any, token: string) => {
    const response = await api.post(`${Local.BASE_URL}chat/sendMessage`, messageData, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    console.log("message>>>>>>>>>>>>>.............",response)
    return response.data;
};

const Chat: React.FC = () => {
    const navigate = useNavigate();
    const token: any = localStorage.getItem('token');
    const decoded: any = jwtDecode(token);
    const userId = decoded.uuid;
    const [selectedRoom, setSelectedRoom] = useState<string | null>(null);
    const [message, setMessage] = useState<string>('');
    const [chatMessages, setChatMessages] = useState<any[]>([]);
    const [isJoined, setIsJoined] = useState(false);

    const { data: chatRooms, isLoading: roomsLoading, error: roomsError } = useQuery({
        queryKey: ['chatRooms'],
        queryFn: () => fetchChatRooms(token!),
    });

    console.log("chatrooooooooomsssss",chatRooms);
    
    const { mutate: sendMessage } = useMutation({
        mutationFn: (messageData: any) => sendChatMessage(messageData, token!),
        onSuccess: () => {
            setMessage('');
        },
        onError: (error) => {
            console.error('Error sending message:', error);
        },
    });

    useEffect(() => {
        if (!token) {
            navigate('/login');
        }

        // Initialize socket connection
        socket = io(`${Local.BASE_URL}`);
        
        socket.on('receive_message', (messageData) => {
            setChatMessages((prevMessages) => [...prevMessages, messageData]);
        });

        // Cleanup on unmount
        return () => {
            socket.off('receive_message');
            socket.disconnect();
        };
    }, [token, navigate]);

    useEffect(() => {
        if (selectedRoom && !isJoined) {
            socket.emit('join_room', selectedRoom);
            setIsJoined(true);
        }

        return () => {
            if (selectedRoom) {
                socket.emit('leave_room', selectedRoom);
            }
        };
    }, [selectedRoom]);

    const handleSelectRoom = (roomId: string) => {
        setSelectedRoom(roomId);
        setChatMessages([]);
        fetchChatMessages(roomId, token!).then((messages) => {
            console.log("inside", messages);
            setChatMessages(messages);
        });
    };

    const handleSendMessage = () => {
        if (!message.trim()) return;

        const messageData = {
            chatRoomId: selectedRoom,
            senderId: userId,
            message,
        };
      
        setChatMessages((prevMessages) => [
            ...prevMessages,
            { senderId: userId, message, firstname: 'You' },
        ]);

      
        socket.emit('send_message', messageData);

       
        sendMessage(messageData);
    };

    console.log(chatMessages);

    return (
        <div className="chat-container row">
            {/* Left Panel - Chat Rooms List */}
            <div className="chat-header col" style={{ marginLeft: "20%", width: '50%' }}>
                <h5>Messages</h5>
                <input type="text" className="form-control my-3" placeholder="Search..." />
                <ul className="list-group">
                    {roomsLoading ? (
                        <div>Loading rooms...</div>
                    ) : roomsError ? (
                        <div>Error loading rooms: {roomsError instanceof Error ? roomsError.message : 'Unknown error'}</div>
                    ) : (
                        chatRooms?.map((room: any) => (
                            <li
                                key={room.roomId}
                                className="list-group-item"
                                onClick={() => handleSelectRoom(room.roomId)}
                            >
                                <img className="p-img" src="profile1.png" alt="profile" />
                                <span className="fw-bold">{room.patientName}</span>
                            </li>
                        ))
                    )}
                </ul>
            </div>

            {/* Right Panel - Chat Window */}
            <div className="chat-messages col">
                {selectedRoom ? (
                    <>
                        <div className="chat-header">
                            <h6>Chat Room: {selectedRoom}</h6>
                        </div>
                        <div className="messages-container">
                            {chatMessages.map((msg: any, index) => (
                                <div key={index} className="message">
                                    <strong>{msg.senderId === userId ? 'You' : `${msg.senderFirstName}${" "} ${msg.senderLastName}`}: </strong>
                                    <span>{msg.message}</span>
                                </div>
                            ))}
                        </div>

                        <div className="message-input">
                            <textarea
                                className="form-control"
                                placeholder="Type a message"
                                value={message}
                                onChange={(e) => setMessage(e.target.value)}
                            />
                            <button
                                className="btn btn-primary my-2"
                                onClick={handleSendMessage}
                            >
                                Send
                            </button>
                        </div>
                    </>
                ) : (
                    <div>Select a chat room to start chatting</div>
                )}
            </div>
        </div>
    );
};

export default Chat;
/////////////////////////////////////////////////////////////////////

import { Request, Response } from 'express';
import ChatMessages from '../models/ChatMessage';
import ChatRooms from '../models/ChatRoom';
import { Op } from 'sequelize';
import User from '../models/User';
import Patient from '../models/Patient';

export const getOrCreateChatRoom = async (req: Request, res: Response): Promise<void> => {
    const { referedById, referedToId,patientId, roomId } = req.body;
    try {
        let chatRoom = await ChatRooms.findOne({
            where: {
                referedById,
                referedToId,
                patientId,
            }
        });
        if (!chatRoom) {
            chatRoom = await ChatRooms.create({ referedById, referedToId ,patientId,roomId});
        }
        res.status(200).json(chatRoom); 
    } catch (error) {
        console.error('Error getting or creating chat room:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
  };
  
  
  export const sendMessage = async (req: Request, res: Response): Promise<void> => {
    const { chatRoomId, senderId, message } = req.body;
  
    try {
      const chatRoomExists = await ChatRooms.findOne({
        where: { roomId: chatRoomId }, 
      });
  
      if (!chatRoomExists) {
        res.status(404).json({ error: 'Chat room not found' });
        return;
      }
  
      const chatMessage = await ChatMessages.create({ chatRoomId, senderId, message });
  
      res.status(201).json(chatMessage);
    } catch (error) {
      console.error('Error sending message:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };
  
  
  
  export const getChatHistory = async (req: Request, res: Response): Promise<void> => {
    const { chatRoomId } = req.params;

    try {
       
        const messages = await ChatMessages.findAll({
            where: { chatRoomId },
           
        });

     
        const messagesWithUsers = await Promise.all(
            messages.map(async (message) => {
              
                const user = await User.findOne({ where: { uuid: message.senderId } });

                
                console.log("sender first name", user ? user.firstname : 'Unknown');
                console.log("sender last name", user ? user.lastname : 'Unknown');

              
                return {
                    ...message.toJSON(),
                    senderFirstName: user ? user.firstname : 'Unknown',
                    senderLastName: user ? user.lastname : 'Unknown',
                };
            })
        );

        res.status(200).json(messagesWithUsers);

    } catch (error) {
        console.error('Error fetching chat history:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

  
export const getUserChatRooms = async (req: any, res: Response): Promise<void> => {
  try {
    const { uuid } = req.user;

    
    const chatRooms = await ChatRooms.findAll({
      where: {
        [Op.or]: [
          { referedById: uuid },
          { referedToId: uuid },
        ]
      },
    });

  
    if (!chatRooms || chatRooms.length === 0) {
      res.status(404).json({ message: 'No chat rooms found for this user' });
      return;
    }

 
    const chatRoomsWithPatientNames = await Promise.all(chatRooms.map(async (chatRoom) => {
      const patientId = chatRoom.dataValues.patientId;

     
      const patient = await Patient.findOne({ where: { uuid: patientId } });

      if (patient) {
      
        return {
          ...chatRoom.dataValues, 
          patientName: `${patient.firstname} ${patient.lastname}`,  
        };
      }

    
      return chatRoom.dataValues;
    }));

 
    res.status(200).json(chatRoomsWithPatientNames);
  } catch (error) {
    console.error('Error fetching chat rooms:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};





////////////////////////////////////////////////////////////////////////////////////////////



/* General chat container setup */
.chat-container {
    display: flex;
    flex-direction: row;
    gap: 20px;
    background-color: #f9f9f9;
    padding: 20px;
    height: 100%;
    box-sizing: border-box;
}

/* Left panel: Chat Rooms List */
.chat-header {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    width: 450px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    flex-shrink: 0;
}

.chat-header h5 {
    margin-bottom: 20px;
    font-weight: 600;
    color: #333;
}

.chat-header input {
    margin-bottom: 15px;
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
}

.list-group-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border: none;
    background-color: #fff;
    cursor: pointer;
    transition: background-color 0.3s;
}

.list-group-item:hover {
    background-color: #f0f0f0;
}

.list-group-item img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.list-group-item span {
    font-weight: 600;
    color: #333;
}

/* Right Panel: Chat Window */
.chat-messages {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    flex-grow: 1; /* Makes the chat window grow to fill available space */
    display: flex;
    flex-direction: column;
    gap: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Chat Header in Right Panel */
.chat-messages .chat-header {
    margin-bottom: 15px;
}

.chat-messages .chat-header h6 {
    font-weight: 600;
    color: #333;
}

/* Messages container setup */
.messages-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    overflow-y: auto; /* Allows the chat area to scroll */
    max-height: calc(100vh - 200px); /* Dynamic height for messages */
    padding-right: 10px;
}

/* Message Bubbles */
.message {
    max-width: 75%;
    padding: 10px 15px;
    border-radius: 20px;
    margin: 5px 0;
    display: inline-block;
    font-size: 14px;
    line-height: 1.4;
    background-color: #f2f2f2;
    color: #333;
}

.message strong {
    font-weight: 600;
}

.message span {
    font-size: 14px;
}

.message.you {
    background-color: #3b82f6;
    color: white;
    align-self: flex-end;
}

.message.others {
    background-color: #f0f0f0;
    color: #333;
    align-self: flex-start;
}

/* Message Input Area */
.message-input {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
}

.message-input textarea {
    width: 100%;
    height: 60px;
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #ddd;
    font-size: 14px;
    resize: none;
    outline: none;
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
}

.message-input button {
    background-color: #3b82f6;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
}

.message-input button:hover {
    background-color: #2563eb;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .chat-container {
        flex-direction: column;
        height: auto;
        padding: 10px;
    }

    .chat-header {
        margin-right: 0;
        margin-bottom: 20px;
        width: 100%;
    }

    .chat-messages {
        width: 100%;
    }

    .message-input button {
        width: 100%;
    }
}




//--------------------------------------------------------
.chat-container{
    margin-left: 250px;
    padding: 20px;
    background-color: #ecf1f3;
    /* border-radius: 8px; */
    min-height: 90vh;
    /* margin-top: 6px; */
}

.p-img{
    width: 50px;
    margin-right: 15px;
}

.sent {
    background-color: #007bff;
    color: white;
    margin-left: auto;
  }
  
  .received {
    background-color: #e4e6eb;
    margin-right: auto;
  }


.messages-container{
    flex: 1;
    overflow-y: auto;
    background-color: #f9f9f9;
}

.message {
    padding: 10px;
    border-radius: 15px;
    margin-bottom: 10px;
    /* width: fit-content; */
    max-width: 40%;
  }

  .messages-container{
    padding: 15px;
  border-radius: 10px;
  max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    height: 100vh;
  }
