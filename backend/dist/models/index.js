"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Admin = exports.Friend = exports.Comment = exports.Wave = exports.Preference = exports.User = exports.sequelize = void 0;
const db_1 = __importDefault(require("../config/db"));
exports.sequelize = db_1.default;
const users_1 = __importDefault(require("./users"));
exports.User = users_1.default;
const preference_1 = __importDefault(require("./preference"));
exports.Preference = preference_1.default;
const waves_1 = __importDefault(require("./waves"));
exports.Wave = waves_1.default;
const comments_1 = __importDefault(require("./comments"));
exports.Comment = comments_1.default;
const friends_1 = __importDefault(require("./friends"));
exports.Friend = friends_1.default;
const admin_1 = __importDefault(require("./admin"));
exports.Admin = admin_1.default;
users_1.default.initModel(db_1.default);
preference_1.default.initModel(db_1.default);
waves_1.default.initModel(db_1.default);
comments_1.default.initModel(db_1.default);
friends_1.default.initModel(db_1.default);
admin_1.default.initModel(db_1.default);
users_1.default.belongsTo(admin_1.default, { foreignKey: "userId", as: "admin" });
admin_1.default.hasMany(users_1.default, { foreignKey: "userId", as: "users" });
users_1.default.hasOne(preference_1.default, { foreignKey: "userId", as: "preferences" });
users_1.default.hasMany(waves_1.default, { foreignKey: "userId", as: "wave" });
users_1.default.hasMany(comments_1.default, { foreignKey: "commenterId", as: "comments" });
users_1.default.hasMany(friends_1.default, { foreignKey: "inviterId", as: "sentInvites" });
friends_1.default.belongsTo(users_1.default, { foreignKey: "inviterId", as: "inviter" });
preference_1.default.belongsTo(users_1.default, { foreignKey: "userId", as: "user" });
comments_1.default.belongsTo(users_1.default, { foreignKey: "commenterId", as: "commenter" });
comments_1.default.belongsTo(waves_1.default, { foreignKey: "waveId", as: "wave" });
waves_1.default.belongsTo(users_1.default, { foreignKey: "userId", as: "user" });
waves_1.default.hasMany(comments_1.default, { foreignKey: "waveId", as: "comments" });
