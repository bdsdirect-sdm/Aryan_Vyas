import express from 'express';
import http from 'http';
import cors from 'cors';
import { Local } from './environment/env';
import sequelize from './config/db';
import User from './models/User';
import userRouter from './routers/userRouter';
import {createServer} from 'http';
import chatRoutes from './routers/chatRoutes';
import { Server, Socket } from 'socket.io';
// import sequelize from 'seq';

const app = express();

const server = http.createServer(app);
const io = new Server(server, {
    cors: {
      origin: "http://localhost:5173",
      methods: ["GET", "POST"],
      credentials: true
    }
  });

export const httpServer = createServer(app);

    
app.use(cors());
app.use(express.json());

app.use("/", userRouter);
app.use("/chat", chatRoutes);

io.on("connection", (socket: Socket) => {
    console.log(`User Connected: ${socket.id}`);
  
    socket.on("join_room", (room: string) => {
      console.log(`${socket.id} joined room ${room}`);
      socket.join(room);  
    });

    socket.on("leave_room", (room: string) => {
        console.log(`${socket.id} left room ${room}`);
        socket.leave(room);
    });
  
    socket.on("send_message", async (data) => {
      const { message, chatRoomId, senderId } = data;
    
      console.log(`Received message data:`, data);
    
      if (!chatRoomId || !senderId) {
        console.error("Chat room ID or sender ID is missing.");
        return;
      }
    
      try {
        const user = await User.findOne({ where: { uuid: senderId } });
    
        if (!user) {
          console.error("User not found.");
          return;
        }
            const messageWithSenderDetails = {
          ...data,
          senderFirstName: user.firstname,
          senderLastName: user.lastname
        };
    
        io.to(chatRoomId).emit("receive_message", messageWithSenderDetails);
    
      } catch (error) {
        console.error("Error fetching sender details:", error);
      }
    });
    
    
  
    socket.on("disconnect", () => {
      console.log(`User Disconnected: ${socket.id}`);
    });
  });
  

sequelize.sync({alter:true}).then(()=>{
    console.log('Database connected');
    
    server.listen(Local.SERVER_PORT,  () => {
        console.log(`Server is running on port ${Local.SERVER_PORT}`);
        });
}).catch((err)=>{
    console.log("Error: ", err);
})
