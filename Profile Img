const multer = require('multer');
const path = require('path');

const storage = multer.diskStorage({
    destination: (req:Request, file:any, cb:any) => {
        cb(null, 'uploads/'); 
    },
    filename: (req:Request, file:any, cb:any) => {
        cb(null, Date.now() + path.extname(file.originalname)); 
    }
  });
export const upload = multer({ storage });


controller
export const updateProfileImage = async (req: any, res: any) => {
    try {
        const { uuid } = req.user;
        
        const imgPath = req.file ? req.file.path : null;

        const user = await User.findOne({ where: { uuid: uuid } });
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        user.profile_photo = imgPath || user.profile_photo;
        await user.save();

        return res.status(200).json({ profile_photo: user.profile_photo, message: "Profile image updated successfully" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Error updating profile image" });
    }
};



Profile component
/* eslint-disable @typescript-eslint/no-explicit-any */

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Modal, Form, Button } from 'react-bootstrap';
import AddAddress from './AddAddress';
import { Local } from '../environment/env';
import '../css/Profile.css';
import { useMutation } from '@tanstack/react-query';
import { toast } from 'react-toastify';

interface Address {
  uuid: string;
  id: string;
  street: string;
  city: string;
  state: string;
  pincode: string;
  phone: string;
}

interface User {
  profile_photo: string;
  gender: string;
  uuid: string;
  firstname: string;
  lastname: string;
  email: string;
  phone: string;
  doctype: number;
  Addresses?: Array<Address>;
}

interface ProfileData {
  user: User;
  message: string;
  patientCount?: number;
  referredPatients?: Array<any>;
  referredDoctors?: Array<any>;
  additionalData?: string;
}

const Profile: React.FC = () => {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showAddAddressModal, setShowAddAddressModal] = useState(false);
  const [formData, setFormData] = useState<User | null>(null);
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const token = localStorage.getItem('token');

  const handleOpenEditModal = () => {
    if (profile) {
      setFormData({ ...profile.user });
    }
    setShowEditModal(true);
  };


  const handleCloseEditModal = () => setShowEditModal(false);

  const handleOpenAddAddressModal = () => setShowAddAddressModal(true);
  const handleCloseAddAddressModal = () => setShowAddAddressModal(false);

  const updateProfileImage = useMutation({
    mutationFn: async (file: File) => {
      const formData = new FormData();
      formData.append('profile_photo', file);

      const response = await axios.put(`${Local.BASE_URL}${Local.UPDATE_PROFILE_IMAGE}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${token}`,
        },
      });

      return response.data;
    },
    onSuccess: () => {
      toast.success('Profile image updated successfully!');
    },
    onError: () => {
      toast.error('Error updating profile image!');
    },
  });

  const handleImageClick = () => {
    const fileInput = document.getElementById('file-input') as HTMLInputElement;
    fileInput?.click();
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      updateProfileImage.mutate(file);
    }
  };




  useEffect(() => {
    const token = localStorage.getItem('token');

    if (!token) {
      setError('User not authenticated');
      setLoading(false);
      return;
    }

    axios
      .get(`${Local.BASE_URL}${Local.GET_USER}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((response) => {
        setProfile(response.data);
        setLoading(false);
      })
      .catch(() => {
        setError('Error fetching profile');
        setLoading(false);
      });
  }, []);

  const handleProfileSubmit = () => {
    const token = localStorage.getItem('token');
    if (!token || !formData) return;

    axios
      .post(
        `${Local.BASE_URL}${Local.UPDATE_USER}`,
        formData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      )
      .then(() => {
        setProfile((prev) => ({
          ...prev!,
          user: formData,
        }));
        setShowEditModal(false);
        alert('Profile updated successfully');
      })
      .catch((err) => {
        console.error(err);
        alert('Error updating profile');
      });
  };

  const handleInputChange = (e: any) => {
    if (formData) {
      const { name, value } = e.target;
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleDeleteAddress = (addressId: string) => {
    const token = localStorage.getItem('token');
    if (!token) return;
    console.log("addderesssid", addressId);

    axios
      .delete(`${Local.BASE_URL}${Local.DELETE_ADDRESS}/${addressId}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then(() => {
        setProfile((prev) => {
          if (prev) {
            const updatedAddresses = prev.user.Addresses?.filter((address) => address.id !== addressId);
            return {
              ...prev,
              user: {
                ...prev.user,
                Addresses: updatedAddresses,
              },
            };
          }
          return prev;
        });
        alert('Address deleted successfully');
      })
      .catch((err) => {
        console.error(err);
        alert('Error deleting address');
      });
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;
  if (!profile) return null;

  const { user, referredPatients, referredDoctors, patientCount, additionalData } = profile;



  return (
    <div className="profile-container">
      <h6 className="profile-title font-weight-bold">Profile</h6>

      <div className='profile-content'>
        <div className="profile-info">
          <div className="img-name d-flex align-items-center">
            {/* <img src='profile1.png' className="mr-3  profile-img" aria-expanded="false" />
            <h6 className='m-3'>
              {user.firstname} {user.lastname}
            </h6> */}
            <img
              src={user.profile_photo ? Local.BASE_URL + user.profile_photo : 'profile1.png'}
              className="mr-3 profile-img"
              aria-expanded="false"
              onClick={handleImageClick}
              alt="Profile"
              style={{ cursor: 'pointer' }}
            />
            <h6 className="m-3">
              {user.firstname} {user.lastname}
            </h6>
            <input
              id="file-input"
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              onChange={handleFileChange}
            />
          </div>
          <button onClick={handleOpenEditModal} className="btn btn-primary mb-4">
            Edit Profile
          </button>
        </div>
        <div className="contact-info">
          <div className="name-gender">
            <div className='col-4 font-weight-bold'><span>Name: </span> <span className='text-secondary'>{user.firstname} {user.lastname}</span></div>
            <div className='font-weight-bold'><span>Gender:</span> <span className='text-secondary'>{user.gender}</span></div>
          </div>
          <div className='d-flex phone-email'>
            <div className='col-4 font-weight-bold'><span>Phone:</span>  <span className='text-secondary'>{user.phone}</span></div>
            <div className='font-weight-bold'><span>Email:</span> <span className='text-secondary'>{user.email}</span> </div>
          </div>
          <a className='insurance-details-link' href='#'>Insurance Details</a>
        </div>
        <div className="add-address-button">
          <button onClick={handleOpenAddAddressModal} className="btn btn-primary mb-4">
            Add Address
          </button>
        </div>
        <div className="address-list">
          <h6> Address information </h6>
          {
            user.Addresses?.map((add, index) => (
              <div className='text-secondary font-weight-bold' key={index}>
                <h5 className='text-black'>{add.street}
                  <i
                    onClick={() => handleDeleteAddress(add.uuid)}
                    className="fa-solid fa-trash m-3 delete-icon"></i>
                </h5>
                <div>{add.phone}</div>
                <div>{add.city}</div>
                <div>{add.state}</div>
                <div>{add.pincode}</div>
                <div className='horizontal-line'></div>
              </div>
            ))
          }
        </div>

        {user.doctype === 1 && referredPatients && (
          <div>
            <h4>Referred Patients:</h4>
            <ul>
              {referredPatients.map((patient) => (
                <li key={patient.uuid}>
                  {patient.firstname} {patient.lastname}
                </li>
              ))}
            </ul>
          </div>
        )}

        {user.doctype === 2 && referredDoctors && (
          <div>
            <h4>Referred Doctors:</h4>
            <ul>
              {referredDoctors.map((doctor) => (
                <li key={doctor.uuid}>
                  {doctor.firstname} {doctor.lastname}
                </li>
              ))}
            </ul>
          </div>
        )}

        {user.doctype === 1 && patientCount !== undefined && (
          <div>
            <h4>Total Patients Referred: {patientCount}</h4>
          </div>
        )}

        {user.doctype === 3 && additionalData && (
          <div>
            <h4>Admin Data:</h4>
            <p>{additionalData}</p>
          </div>
        )}
      </div>

      {/* Edit Profile Modal */}
      <Modal show={showEditModal} onHide={handleCloseEditModal} centered>
        <Modal.Header closeButton>
          <Modal.Title>Edit Profile</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {formData && (
            <Form>
              <Form.Group controlId="firstname">
                <Form.Label className='required'>First Name</Form.Label>
                <Form.Control
                  type="text"
                  name="firstname"
                  value={formData.firstname}
                  onChange={handleInputChange}
                />
              </Form.Group>

              <Form.Group controlId="lastname">
                <Form.Label className='required'>Last Name</Form.Label>
                <Form.Control
                  type="text"
                  name="lastname"
                  value={formData.lastname}
                  onChange={handleInputChange}
                />
              </Form.Group>

              <Form.Group controlId="email">
                <Form.Label className='required'>Email</Form.Label>
                <Form.Control
                  type="email"
                  name="email"
                  value={formData.email}
                  disabled
                  onChange={handleInputChange}
                />
              </Form.Group>

              <Form.Group controlId="gender">
                <Form.Label className='required'>Gender</Form.Label>
                <Form.Select
                  aria-label="Select Gender"
                  name="gender"
                  value={formData.gender}
                  onChange={handleInputChange}
                >
                  <option>Select Gender</option>
                  <option value="Male">Male</option>
                  <option value="Female">Female</option>
                  <option value="Other">Other</option>
                </Form.Select>
              </Form.Group>

              <Form.Group controlId="phone">
                <Form.Label className='required'>Phone</Form.Label>
                <Form.Control
                  type="text"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                />
              </Form.Group>
            </Form>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseEditModal}>
            Close
          </Button>
          <Button variant="primary" onClick={handleProfileSubmit}>
            Save Changes
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Add Address Modal */}
      <Modal show={showAddAddressModal} onHide={handleCloseAddAddressModal} centered>
        <Modal.Header closeButton>
          <Modal.Title>Add New Address</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <AddAddress close={handleCloseAddAddressModal} />
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default Profile;

//////////////////////////////////////////////////////

export const registerUser = async (req: Request, res: Response) :Promise<void> => {
    console.log(req.body)
    try {
        const { firstName, lastName, email, password, address, dob, phoneNumber, role } = req.body;
        const isExist = await User.findOne({ where: { email: email } });
        if (isExist) {
            res.status(httpStatusCodes.BAD_REQUEST).json({ message: "Invalid Credintials" });
        }
        const hashedPassword = await bcrypt.hash(password, 10);
        const otp = otpGenerator();
        const hashedOtp= await bcrypt.hash(otp,10)
        const expiresAt = new Date(Date.now() + 5 * 60 * 1000)


console.log("req:", req);
console.log("req.body:", req.body);
const filesData = req.files as {
    profilePicture?: Express.Multer.File[];
  };    

console.log("req.files:", req.files);
console.log("filesData:", filesData);
console.log(req.files);
  

const profilePicture = filesData.profilePicture && filesData.profilePicture.length > 0 ? filesData.profilePicture[0].originalname : null;

        const user = await User.create(
            {
                firstName,
                lastName,
                email,
                password: hashedPassword,
                address,
                dob,
                phoneNumber,
                profilePicture,
                role,
                otp:hashedOtp,
                expiresAt
            })
        if (user) { 
            sendOTP(email,otp,user.expiresAt)
            console.log(user.expiresAt)
            res.status(httpStatusCodes.CREATED).json({ opt: otp, message: "Data Saved Successfully" })
        }
        else {
            res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Error Occured" })
        }
    }
    catch (error) {
        res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({ message: error })
    }
};

