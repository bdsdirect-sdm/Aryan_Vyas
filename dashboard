/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Local } from '../environment/env';
import api from '../api/axiosInstance';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { v4 as uuidv4 } from 'uuid';
import moment from 'moment';
import './Dashboard.css';

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const token = localStorage.getItem("token");
  const [page, setPage] = useState(1);
  const [limit] = useState(4);

  useEffect(() => {
    if (!token) {
      navigate("/login");
    }
  }, [token, navigate]);

  // Mutation to create the chat room
  const createChatRoomMutation = useMutation({
    mutationFn: async ({ referedById, referedToId, patientId, roomId }: any) => {
      try {
        const response = await api.post(`${Local.BASE_URL}chat/createRoom`, {
          referedById,
          referedToId,
          patientId,
          roomId
        }, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        return response.data;
      } catch (err) {
        console.error("Error creating chat room", err);
      }
    }
  });

  const getUser = async () => {
    try {
      const response = await api.get(`${Local.GET_USER}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      return response;
    } catch (err) {
      toast.error("Failed to fetch user data");
    }
  };




  const fetchPatientList = async () => {
    try {
      const response = await api.get(`${Local.GET_PATIENT_LIST}`, {
        headers: {
          Authorization: `Bearer ${token}`
        },
        params: {
          page,
          limit,
        },
      });
      return response.data;
    } catch (err) {
      toast.error("Failed to fetch patient data");
    }
  };

  const fetchDoctorList = async () => {
    try {
      const response = await api.get(`${Local.GET_DOCTOR_LIST}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      return response.data;
    } catch (err) {
      toast.error("Failed to fetch doctor data");
    }
  };

  const { data: userData, isLoading: userLoading } = useQuery({
    queryKey: ['userData'],
    queryFn: getUser
  });

  const { data: patientData, isLoading: patientLoading } = useQuery({
    queryKey: ['patientData', page],
    queryFn: fetchPatientList
  });

  const { data: doctorData, isLoading: doctorLoading } = useQuery({
    queryKey: ['doctorData'],
    queryFn: fetchDoctorList
  });

  if (userLoading || patientLoading || doctorLoading) {
    return (
      <div className="loading-container">
        <div>Loading...</div>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  const { patientList, pagination } = patientData || {};
  const { user } = userData?.data || {};
  const { doctorList } = doctorData || {};

  const totalRefersCompleted = patientList?.filter((patient: { referalstatus: boolean }) => patient.referalstatus === true).length || 0;

  const totalPages = pagination?.totalPages || 1;
  const currentPage = pagination?.currentPage || 1;

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setPage(newPage);
    }
  };

  const pageNumbers = Array.from({ length: totalPages }, (_, index) => index + 1);

  const handleCreateChatRoom = (referedById: string, referedToId: string, patientId: string) => {
    const roomId = uuidv4();
    createChatRoomMutation.mutate({
      referedById,
      referedToId,
      patientId,
      roomId
    });
  };

  return (
    <div className="dashboard-container">
      <h5 className="dashboard-title">Dashboard</h5>

      <div className="metrics-cards">
        <div className="card" onClick={() => navigate('/patient')}>
          <div className="card-body">
            <div className="card-title">Referrals Placed</div>
            <div className="text-img">
              <img className='text-danger total-img' src='total.svg' alt="referrals-icon" />
              <div className="card-text text-black">{userData?.data.referCount}</div>
            </div>
            <div className="div text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="card-body">
            <div className="card-title">Refers Completed</div>
            <div className="text-img">
              <img className='text-danger total-img' src='completed.svg' alt="referrals-icon" />
              <div className="card-text text-black">{totalRefersCompleted}</div>
            </div>
            <div className="div text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>

        <div className="card" onClick={() => navigate('/doctor')}>
          <div className="card-body">
            <div className="card-title">OD/MD</div>
            <div className="text-img">
              <img className='text-danger total-img' src='doctor.png' alt="referrals-icon" />
              <div className="card-text text-black">{userData?.data.docCount}</div>
            </div>
            <div className="text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>
      </div>

      <div className='refer d-flex'>
        {user.doctype === 2 ? (
          <>
            <h5 className="refer-title mt-4">Refer a Patient</h5>
            <button className="appointment-btn" onClick={() => navigate("/add-patient")}>Add Refer</button>
          </>
        ) : (
          <>
            <h5 className="refer-title">Referrals Placed</h5>
            <button className="appointment-btn" onClick={() => navigate("/add-appointment")}>Add Appointment</button>
          </>
        )}
      </div>

      <div className="patient-list-section">
        <div className="table-responsive">
          <table className="table">
            <thead className='table-light'>
              <tr>
                <th className='col p-name'>Patient Name</th>
                <th className='col'>DOB</th>
                <th className='col'>Consult</th>
                <th className='col'>Date Sent</th>
                <th className='col'>Doctor OD/MD</th>
                <th className='col'>Return</th>
                <th className='col'>Status</th>
                <th className='col'>Direct Message</th>
              </tr>
            </thead>
            <tbody>
              {patientList?.length > 0 ? (
                patientList?.map((patient: any, index: number) => (
                  <tr key={index}>
                    <td>{patient.firstname} {patient.lastname}</td>
                    <td>{moment(patient.dob).format('MMM-DD-YYYY')}</td>
                    <td>{patient.disease}</td>
                    <td>{moment(patient.createdAt).format('MMM-DD-YYYY')}</td>
                    <td>{patient.referedto.firstname} {patient.referedto.lastname}</td>
                    <td>{patient.referback ? 'Yes' : 'No'}</td>
                    <td>
                      <span className={`badge ${patient.referalstatus ? 'bg-success' : 'bg-warning'}`}>
                        {patient.referalstatus ? 'Completed' : 'Pending'}
                      </span>
                    </td>
                    <td onClick={() => handleCreateChatRoom(patient.referedby.uuid, patient.referedto.uuid, patient.uuid)}>
                      <Link className='text-primary' to='/chat'>Link</Link>
                    </td>
                  </tr>
                ))) : (
                <tr><td colSpan={8}>No Patient Found</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      <nav aria-label="Page navigation example">
        <ul className="pagination  justify-content-end">
          <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
            <a className="page-link" href="#" aria-label="Previous" onClick={() => handlePageChange(currentPage - 1)}>
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>

          {pageNumbers.map((num) => (
            <li key={num} className={`page-item ${currentPage === num ? 'active' : ''}`}>
              <a className="page-link" href="#" onClick={() => handlePageChange(num)}>
                {num}
              </a>
            </li>
          ))}

          <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
            <a className="page-link" href="#" aria-label="Next" onClick={() => handlePageChange(currentPage + 1)}>
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  );
};

export default Dashboard;
