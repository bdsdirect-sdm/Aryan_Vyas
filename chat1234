/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Local } from '../environment/env';
import api from '../api/axiosInstance';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { v4 as uuidv4 } from 'uuid';
import moment from 'moment';
import '../css/Dashboard.css';
import { jwtDecode } from 'jwt-decode';
import { useUser } from './context/UserContext';
import Pagination from './Pagination';

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const token: any = localStorage.getItem("token");
  const decoded: any = jwtDecode(token);
  const userId = decoded.uuid;
  const [page, setPage] = useState(1);
  const [limit] = useState(4);
  const [sortOrder, setSortOrder] = useState('DESC'); // Default sort order for createdAt
  const { userData, isLoading: userLoading } = useUser();

  useEffect(() => {
    // console.log("usecontext userdata..........", userData);
    if (!token) {

      navigate("/login");
    }


  }, [token, navigate, userId, userData]);




  // Mutation to create the chat room
  const createChatRoomMutation = useMutation({
    mutationFn: async ({ referedById, referedToId, patientId, roomId }: any) => {
      try {
        const response = await api.post(`${Local.BASE_URL}chat/createRoom`, {
          referedById,
          referedToId,
          patientId,
          roomId
        }, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        localStorage.setItem('roomId', response.data.roomId)
        navigate('/chat')
        // console.log("room details->>>>>>>>>>>>>>>>", response.data.roomId);

        return response.data;
      } catch (err) {
        console.error("Error creating chat room", err);
      }
    }
  });



  const fetchPatientList = async () => {
    try {
      const response = await api.get(`${Local.GET_PATIENT_LIST}`, {
        headers: {
          Authorization: `Bearer ${token}`
        },
        params: {
          page,
          limit,
          order: sortOrder
        },
      });
      return response.data;
    } catch (err) {
      toast.error("Failed to fetch patient data");
    }
  };



  const { data: patientData, isLoading: patientLoading } = useQuery({
    queryKey: ['patientData', page, sortOrder],
    queryFn: fetchPatientList
  });

  // console.log("Patient Data->>>", patientData);



  if (userLoading || patientLoading) {
    return (
      <div className="loading-container">
        <div>Loading...</div>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  const { patientList, pagination } = patientData || {};
  const { user } = userData?.data || {};

  const handleSortClick = () => {
    setSortOrder(sortOrder === 'ASC' ? 'DESC' : 'ASC');
    // fetchDoctor()
  };

  const dataToSent = userData?.data;
  // console.log("datatosentttttt", dataToSent);

  const handleNavigateToGraph = () => {
    navigate('/graph', { state: { dataToSent } });
  };

  const totalPages = pagination?.totalPages || 1;
  const currentPage = pagination?.currentPage || 1;

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setPage(newPage);
    }
  };

  const pageNumbers = Array.from({ length: totalPages }, (_, index) => index + 1);

  const handleCreateChatRoom = (referedById: string, referedToId: string, patientId: string) => {
    const roomId = uuidv4();
    createChatRoomMutation.mutate({
      referedById,
      referedToId,
      patientId,
      roomId
    });
  };

  const setRoomDetailsToLocal = (referedById: string, patientFirstname: string, patientLastname: string, referedtoFirstname: string, referedtoLastname: string, referedbyFirstname: string, referedbyLastname: string) => {
    localStorage.setItem("patientFirstName", patientFirstname)
    localStorage.setItem("patientLastName", patientLastname)
    if (referedById === userId) {
      localStorage.setItem("doctor_name", referedtoFirstname + ' ' + referedtoLastname)
    } else {
      localStorage.setItem("doctor_name", referedbyFirstname + ' ' + referedbyLastname)
    }
  }

  return (
    <div className="dashboard-container">
      {/* <Graph /> */}

      <div className='header-title d-flex justify-content-between'>
        <h5 className="dashboard-title">Dashboard</h5>
        <div className="dashboard-title btn btn-info" onClick={handleNavigateToGraph}><i className="fa-solid fa-chart-line"></i></div>
      </div>

      <div className="metrics-cards">
        <div className="card" onClick={() => navigate('/patient')}>
          <div className="card-body">
            <div className="card-title">Referrals Placed</div>
            <div className="text-img">
              <img className='text-danger total-img' src='total.svg' alt="referrals-icon" />
              <div className="card-text text-black">{userData?.data.referCount}</div>
            </div>
            <div className="div text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="card-body">
            <div className="card-title">Refers Completed</div>
            <div className="text-img">
              <img className='text-danger total-img' src='completed.svg' alt="referrals-icon" />
              <div className="card-text text-black">{userData?.data?.referCompleted}</div>
            </div>
            <div className="div text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>

        <div className="card" onClick={() => navigate('/doctor')}>
          <div className="card-body">
            <div className="card-title">OD/MD</div>
            <div className="text-img">
              <img className='text-danger total-img' src='doctor.png' alt="referrals-icon" />
              <div className="card-text text-black">{userData?.data.docCount}</div>
            </div>
            <div className="text-end">
              <div className="last-updated text-secondary font-weight-bold">Last updated: Nov 21</div>
            </div>
          </div>
        </div>
      </div>

      <div className='refer d-flex'>
        {user.doctype === 2 ? (
          <>
            <h5 className="refer-title mt-4">Refer a Patient</h5>
            <button className="appointment-btn" onClick={() => navigate("/add-patient")}>Add Refer</button>
          </>
        ) : (
          <>
            <h5 className="refer-title">Referrals Placed</h5>
            <button className="appointment-btn" onClick={() => navigate("/add-appointment")}>Add Appointment</button>
          </>
        )}
      </div>

      <div className="patient-list-section">
        <div className="table-responsive">
          <table className="table">
            <thead className='table-light'>
              <tr>
                <th className='col p-name'>Patient Name <i onClick={handleSortClick} className="fa-solid fa-sort"></i></th>
                <th className='col'>DOB</th>
                <th className='col'>Consult</th>
                <th className='col'>Date Sent</th>
                <th className='col'>Doctor OD/MD</th>
                <th className='col'>Return</th>
                <th className='col'>Status</th>
                <th className='col'>Direct Message</th>
              </tr>
            </thead>
            <tbody>
              {patientList?.length > 0 ? (
                patientList?.map((patient: any, index: number) => (
                  <tr key={index}>
                    <td className='text-primary link-1' onClick={() => {
                      navigate(`/patient-details/${patient.uuid}`)
                    }}>{patient.firstname} {patient.lastname}</td>
                    <td>{moment(patient.dob).format('MMM-DD-YYYY')}</td>
                    <td>{patient.disease}</td>
                    <td>{moment(patient.createdAt).format('MMM-DD-YYYY')}</td>
                    <td>{patient.referedby.uuid == userId ? patient.referedto.firstname + ' ' + patient.referedto.lastname : patient.referedby.firstname + ' ' + patient.referedby.lastname}</td>
                    {/* <td>{patient.referedto.firstname} {patient.referedto.lastname}</td> */}
                    <td>{patient.referback ? 'Yes' : 'No'}</td>
                    <td>
                      <span
                        className={`${patient?.referalstatus == 1 ? 'text-success' : patient?.referalstatus == 3 ? 'text-primary' :
                          patient?.referalstatus == 0 ? 'text-danger' :
                            'text-warning'}`}
                      >
                        {/* Display status text */}
                        {patient?.referalstatus == 1 && 'Completed'}
                        {patient?.referalstatus == 0 && 'Rejected'}
                        {patient?.referalstatus == 2 && 'Pending'}
                        {patient?.referalstatus == 3 && 'Scheduled'}
                      </span>

                    </td>
                    {/* <td onClick={() => handleCreateChatRoom(patient.referedby.uuid, patient.referedto.uuid, patient.uuid)}>
                      <Link className='text-primary' to='/chat'>Link</Link>
                    </td> */}
                    <td
                      onClick={() => {
                        handleCreateChatRoom(patient.referedby.uuid, patient.referedto.uuid, patient.uuid);
                        setRoomDetailsToLocal(
                          patient.referedby.uuid,
                          patient.firstname,
                          patient.lastname,
                          patient.referedto.firstname,
                          patient.referedto.lastname,
                          patient.referedby.firstname,
                          patient.referedby.lastname
                        );
                      }}
                    ><div className='text-primary link-1'>Link</div></td>
                  </tr>
                ))) : (
                <tr><td colSpan={8}>No Patient Found</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      <Pagination
        totalPages={totalPages}
        currentPage={currentPage}
        handlePageChange={handlePageChange}
      />
    </div>
  );
};

export default Dashboard;


------------------------------------------------------------------

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useEffect, useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import api from '../api/axiosInstance';
import { jwtDecode } from 'jwt-decode';
import '../css/Chat.css';
import { Local } from '../environment/env';
import { io, Socket } from 'socket.io-client';
import moment from 'moment';

const socket: Socket = io(`${Local.BASE_URL}`);

const fetchChatRooms = async (token: string) => {
    const response = await api.get(`${Local.BASE_URL}chat/chatRooms`, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    return response.data;
};

const fetchChatMessages = async (chatRoomId: string, token: string) => {
    try {
        const response = await api.get(`${Local.BASE_URL}chat/chatMessages/${chatRoomId}`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        return response.data;
    } catch (err) {
        console.error(err);
        throw err;
    }
};

const sendChatMessage = async (messageData: any, token: string) => {
    const response = await api.post(`${Local.BASE_URL}chat/sendMessage`, messageData, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    return response.data;
};

const Chat: React.FC = () => {
    const navigate = useNavigate();
    const token: any = localStorage.getItem('token');
    const initialRoom: any = localStorage.getItem('roomId');
    const doctor_name: any = localStorage.getItem('doctor_name');
    const patientFirstName: any = localStorage.getItem('patientFirstName');
    const patientLastName: any = localStorage.getItem('patientLastName');
    const decoded: any = jwtDecode(token);
    const userId = decoded.uuid;
    const queryClient = useQueryClient();

    const [selectedRoom, setSelectedRoom] = useState<string | null>(initialRoom || null);
    const [selectedPatient, setSelectedPatient] = useState<any | null>(() => {
        if (doctor_name && patientFirstName && patientLastName) {
            return {
                doctor_name,
                patientFirstName,
                patientLastName,
            };
        }
        return null;
    });

    const [message, setMessage] = useState<string>('');
    const [chatMessages, setChatMessages] = useState<any[]>([]);
    const [isJoined, setIsJoined] = useState(false);
    const [searchTerm, setSearchTerm] = useState<string>('');

    const { data: chatRooms, isLoading: roomsLoading, error: roomsError } = useQuery({
        queryKey: ['chatRooms'],
        queryFn: () => fetchChatRooms(token!),
    });

    console.log("chatroomssssssssss", chatRooms?.length);

    const { mutate: sendMessage } = useMutation({
        mutationFn: (messageData: any) => sendChatMessage(messageData, token!),
        onSuccess: () => {
            setMessage('');
        },
        onError: (error) => {
            console.error('Error sending message:', error);
        },
    });

    useEffect(() => {
        if (!token) {
            navigate('/login');
        }

        queryClient.invalidateQueries({ queryKey: ['chatRooms'] });

        socket.on('receive_message', (messageData) => {
            setChatMessages((prevMessages) => [...prevMessages, messageData]);
        });

        return () => {
            socket.off('receive_message');
        };
    }, [token, navigate, queryClient]);

    useEffect(() => {
        if (selectedRoom) {
            if (isJoined) {
                socket.emit('leave_room', selectedRoom);
            }

            socket.emit('join_room', selectedRoom);
            setIsJoined(true);

            fetchChatMessages(selectedRoom, token!).then((messages) => {
                setChatMessages(messages);
            });
        }

        return () => {
            if (selectedRoom) {
                socket.emit('leave_room', selectedRoom);
                setIsJoined(false);
            }
        };
    }, [isJoined, selectedRoom, token]);

    useEffect(() => {
        return () => {
            localStorage.removeItem('roomId');
            localStorage.removeItem('doctor_name');
            localStorage.removeItem('patientFirstName');
            localStorage.removeItem('patientLastName');
        };
    }, []);

    const handleSelectRoom = (roomId: string, doctor_name: string, patientFirstName: string, patientLastName: string, profile_photo: string) => {
        setSelectedRoom(roomId);
        setSelectedPatient({ doctor_name, patientFirstName, patientLastName, profile_photo });
    };

    const handleSendMessage = () => {
        if (!message.trim()) return;

        const messageData = {
            chatRoomId: selectedRoom,
            senderId: userId,
            message,
        };

        socket.emit('send_message', messageData);
        sendMessage(messageData);
    };

    // Filter rooms based on search term
    const filteredChatRooms = chatRooms?.filter((room: any) => {
        const fullName = `${room.patientFirstName} ${room.patientLastName}`.toLowerCase();
        const doctorName = room.doctor_name.toLowerCase();
        return (
            fullName.includes(searchTerm.toLowerCase()) ||
            doctorName.includes(searchTerm.toLowerCase())
        );
    });

    return (
        <div className="chat-container row">
            {/* Left Panel - Chat Rooms List */}
            <div className="chat-header col">
                <h5>Messages</h5>
                <input
                    type="text"
                    className="form-control my-3"
                    placeholder="Search Patient..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
                <ul className="list-group">
                    {chatRooms?.length === 0 ? (
                        <div className="">
                            <div className="no-rooms-message d-flex justify-content-center text-primary">Currently no chat rooms found</div>
                        </div>
                    ) : (
                        filteredChatRooms?.map((room: any) => (
                            <li
                                key={room.roomId}
                                className="list-group-item d-flex"
                                onClick={() => handleSelectRoom(room.roomId, room.doctor_name, room.patientFirstName, room.patientLastName, room.profile_photo)}
                            >
                                <img className="p-img" src={room.profile_photo ? Local.BASE_URL + room.profile_photo : 'profile1.png'} alt="profile" />
                                <div>
                                    <div className="fw-bold">{room.patientFirstName} {room.patientLastName}</div>
                                    <small> Doctor: {room.doctor_name}</small>
                                </div>
                            </li>
                        ))
                    )}
                </ul>
            </div>

            {/* Right Panel - Chat Window */}
            <div className="chat-messages col">
                {selectedRoom ? (
                    <>
                        <div className="chat-header">
                            <div className='d-flex'>
                                <img className="p-img" src={selectedPatient.profile_photo ? Local.BASE_URL + selectedPatient.profile_photo : 'profile1.png'} alt="profile" />
                                <div>
                                    <div className='font-weight-bold'>{selectedPatient.doctor_name}</div>
                                    <small>{selectedPatient.patientFirstName} {selectedPatient.patientLastName}</small>
                                </div>
                            </div>
                            <div className='h-line'></div>
                        </div>
                        <div className="messages-container">
                            {chatMessages.map((msg: any, index) => (
                                <div key={index} className={`message ${msg.senderId === userId ? 'sent' : 'received'}`}>
                                    <div>{msg.message}</div>
                                    <small className="message-time">
                                        <small>{msg.senderId === userId ? `you` : msg.senderFirstName} : </small>
                                        <small>{moment(msg.createdAt).calendar()}</small>
                                    </small>
                                </div>
                            ))}
                        </div>
                        <div className="chat-input d-flex">
                            <input
                                className="form-control me"
                                placeholder="Type a message..."
                                value={message}
                                onChange={(e) => setMessage(e.target.value)}
                                onKeyDown={(event) => {
                                    if (event.key === 'Enter') {
                                        event.preventDefault();
                                        handleSendMessage();
                                    }
                                }}
                            />
                            <button onClick={handleSendMessage} className="btn btn-primary my-2">Send</button>
                        </div>
                    </>
                ) : (
                    <div className='d-flex justify-content-center text-primary'>Select a Patient to send message</div>
                )}
            </div>
        </div>
    );
};

export default Chat;
